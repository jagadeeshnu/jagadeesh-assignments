                                        mongodb lab assignment 1
query/find document:
query the movies collection to
1 get all documents

db.movies.insert({title:'Fight Club',writer:'Chuck Palahniuko',year:1999,actors:['Brad Pitt','Edward Norton']})
'DeprecationWarning: Collection.insert() is deprecated. Use insertOne, insertMany, or bulkWrite.'
{ acknowledged: true,
  insertedIds: { '0': ObjectId("617bd57da3e85ef8a6b2cdcc") } }
db.movies.insert({title:'Pulp Fiction',writer:'Quentin Tarantino',year:1994,actors:['John Travolta','Uma Thurman']})
{ acknowledged: true,
  insertedIds: { '0': ObjectId("617bd5c9a3e85ef8a6b2cdcd") } }
db.movies.insert({title:'Inglorious Basterds',writer:'Quentin Tarantino',year:2009,actors:['Brad Pitt','Diane Kruger','Eli Roth']})
{ acknowledged: true,
  insertedIds: { '0': ObjectId("617bd620a3e85ef8a6b2cdce") } }
db.movies.insert({title:'The Hobbit: An Unexpected Journey',writer:'J.R.R. Tolkien',year:2012,franchise: 'The Hobbit'})
{ acknowledged: true,
  insertedIds: { '0': ObjectId("617bd649a3e85ef8a6b2cdcf") } }
db.movies.insert({title:'The Hobbit: The Desolation of Smaug',writer:'J.R.R. Tolkien',year:2013,franchise:'The Hobbit'})
{ acknowledged: true,
  insertedIds: { '0': ObjectId("617bd669a3e85ef8a6b2cdd0") } }
db.movies.insert({title:'The Hobbit: The Battle of Five Armies',writer:'J.R.R. Tolkien',year:2012,franchise:'The Hobbit',synopsis:'Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness.'})



db.movies.insert({title:'The Hobbit: The Battle of Five Armies',writer:'J.R.R. Tolkien',year:2012,franchise:'The Hobbit',synopsis:'Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness.'})
{ acknowledged: true,
  insertedIds: { '0': ObjectId("617bd6cfa3e85ef8a6b2cdd1") } }
db.movies.insert({title:'Avatar'})
{ acknowledged: true,
  insertedIds: { '0': ObjectId("617bd700a3e85ef8a6b2cdd2") } }
db.movies.insert({title:"Pee Wee Herman's Big Adventure"})
{ acknowledged: true,
  insertedIds: { '0': ObjectId("617bd71da3e85ef8a6b2cdd3") } }

find documents

1. db.movies.find()
db.movies.find({title:'Pulp Fiction',writer:'Quentin Tarantino',year:1994,actors:['John Travolta','Uma Thurman']})
{ _id: ObjectId("617bd5c9a3e85ef8a6b2cdcd"),
  title: 'Pulp Fiction',
  writer: 'Quentin Tarantino',
  year: 1994,
  actors: [ 'John Travolta', 'Uma Thurman' ] }
 2.db.movies.find({actors:"Brad Pitt"})
{ _id: ObjectId("617bd57da3e85ef8a6b2cdcc"),
  title: 'Fight Club',
  writer: 'Chuck Palahniuko',
  year: 1999,
  actors: [ 'Brad Pitt', 'Edward Norton' ] }
{ _id: ObjectId("617bd620a3e85ef8a6b2cdce"),
  title: 'Inglorious Basterds',
  writer: 'Quentin Tarantino',
  year: 2009,
  actors: [ 'Brad Pitt', 'Diane Kruger', 'Eli Roth' ] }
3 db.movies.find({franchise:"The Hobbit"})
{ _id: ObjectId("617bd649a3e85ef8a6b2cdcf"),
  title: 'The Hobbit: An Unexpected Journey',
  writer: 'J.R.R. Tolkien',
  year: 2012,
  franchise: 'The Hobbit' }
{ _id: ObjectId("617bd669a3e85ef8a6b2cdd0"),
  title: 'The Hobbit: The Desolation of Smaug',
  writer: 'J.R.R. Tolkien',
  year: 2013,
  franchise: 'The Hobbit' }
{ _id: ObjectId("617bd6cfa3e85ef8a6b2cdd1"),
  title: 'The Hobbit: The Battle of Five Armies',
  writer: 'J.R.R. Tolkien',
  year: 2012,
  franchise: 'The Hobbit',
  synopsis: 'Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness.' }
4 db.movies.find({year:{$lt:2010,$gt:2000}})
{ _id: ObjectId("617bd620a3e85ef8a6b2cdce"),
  title: 'Inglorious Basterds',
  writer: 'Quentin Tarantino',
  year: 2009,
  actors: [ 'Brad Pitt', 'Diane Kruger', 'Eli Roth' ] }

update documents

1 db.movies.update({title:'The Hobbit: An Unexpected Journey'},{$set: {synopsis: 'A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited roup of dwarves to reclaim their mountain home = and the gold within it - from the dragon smaug.'} })
'DeprecationWarning: Collection.update() is deprecated. Use updateOne, updateMany, or bulkWrite.'
{ acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0 }
2 db.movies.update({title:'The Hobbit: The desolation of Smaug'},{$set: {synopsis: 'The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious magical ring.'} })
{ acknowledged: true,
  insertedId: null,
  matchedCount: 0,
  modifiedCount: 0,
  upsertedCount: 0 }
3 db.movies.update({title:'Pulp Fiction'},{$push:{actors: 'Samuel L. Jackson'}})
{ acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0 }

text search

db.movies.createIndex({synopsis:'text'})
'synopsis_text'
 1 db.movies.find({$text:{$search:'Bilbo'}})
{ _id: ObjectId("617bd6cfa3e85ef8a6b2cdd1"),
  title: 'The Hobbit: The Battle of Five Armies',
  writer: 'J.R.R. Tolkien',
  year: 2012,
  franchise: 'The Hobbit',
  synopsis: 'Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness.' }
{ _id: ObjectId("617bd649a3e85ef8a6b2cdcf"),
  title: 'The Hobbit: An Unexpected Journey',
  writer: 'J.R.R. Tolkien',
  year: 2012,
  franchise: 'The Hobbit',
  synopsis: 'A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited roup of dwarves to reclaim their mountain home = and the gold within it - from the dragon smaug.' }
 2 db.movies.find({$text:{$search:'Gandalf'}})
 3 db.movies.find({$text:{$search:'Bilbo -Gandalf'}}) 
{ _id: ObjectId("617bd6cfa3e85ef8a6b2cdd1"),
  title: 'The Hobbit: The Battle of Five Armies',
  writer: 'J.R.R. Tolkien',
  year: 2012,
  franchise: 'The Hobbit',
  synopsis: 'Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness.' }
{ _id: ObjectId("617bd649a3e85ef8a6b2cdcf"),
  title: 'The Hobbit: An Unexpected Journey',
  writer: 'J.R.R. Tolkien',
  year: 2012,
  franchise: 'The Hobbit',
  synopsis: 'A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited roup of dwarves to reclaim their mountain home = and the gold within it - from the dragon smaug.' }
 4 db.movies.find({$text:{$search:'dwarves hobbit'}})          
{ _id: ObjectId("617bd649a3e85ef8a6b2cdcf"),
  title: 'The Hobbit: An Unexpected Journey',
  writer: 'J.R.R. Tolkien',
  year: 2012,
  franchise: 'The Hobbit',
  synopsis: 'A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited roup of dwarves to reclaim their mountain home = and the gold within it - from the dragon smaug.' }
 5. db.movies.find({$text:{$search:"'gold' 'dragon'"}})     
{ _id: ObjectId("617bd649a3e85ef8a6b2cdcf"),
  title: 'The Hobbit: An Unexpected Journey',
  writer: 'J.R.R. Tolkien',
  year: 2012,
  franchise: 'The Hobbit',
  synopsis: 'A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited roup of dwarves to reclaim their mountain home = and the gold within it - from the dragon smaug.' }

delete documents

  db.movies.remove({title: "Avatar"})
'DeprecationWarning: Collection.remove() is deprecated. Use deleteOne, deleteMany, findOneAndDelete, or bulkWrite.'
{ acknowledged: true, deletedCount: 1 }
db.movies.remove({title: "Pee Wee Herman's Big Adventure"})
{ acknowledged: true, deletedCount: 1 }
db.createCollection('users')
{ ok: 1 }
db.users.insertMany([

{  username: "GoodGuyGreg", first_name:"Good Guy",last_name:"Greg"},
{  username: "ScumbagSteve", full_name:{first_name:"Scumbag",last_name:"Steve"} }
  ]);
{ acknowledged: true,
  insertedIds: 
   { '0': ObjectId("617bdb89a3e85ef8a6b2cdd4"),
     '1': ObjectId("617bdb89a3e85ef8a6b2cdd5") } }
db.posts.insertMany([

{  username: "GoodGuyGreg", title:"Passes out at party",body:"Wakes up early and cleans house"},
{  username: "GoodGuyGreg", title:"Steals your identity",body:"Raises your credit score"},

{  username: "GoodGuyGreg", title:"Reports a bug in your code",body:"Sends you a pull request"},

{  username: "ScumbagSteve", title:"Borrows something",body:"Sells it"},

{  username: "ScumbagSteve", title:"Borrows everything",body:"The end"},

{  username: "ScumbagSteve", title:"Forks your repo on github",body:"Sets to private"}
  ]);
{ acknowledged: true,
  insertedIds: 
   { '0': ObjectId("617bdbb7a3e85ef8a6b2cdd6"),
     '1': ObjectId("617bdbb7a3e85ef8a6b2cdd7"),
     '2': ObjectId("617bdbb7a3e85ef8a6b2cdd8"),
     '3': ObjectId("617bdbb7a3e85ef8a6b2cdd9"),
     '4': ObjectId("617bdbb7a3e85ef8a6b2cdda"),
     '5': ObjectId("617bdbb7a3e85ef8a6b2cddb") } }
db.comments.insertMany([

{  username: "GoodGuyGreg", comment:"Hope you got a good deal!",post:"607f49ca845ea1cba8e2ij18"},
{  username: "GoodGuyGreg", comment:"What's mine is yours!",post:"607f49ca845ea1cba8e2ij19"},

{  username: "GoodGuyGreg", comment:"Don't violate the licensing agreement!",post:"607f49ca845ea1cba8e2ij20"},

{  username: "ScumbagSteve", comment:"It still isn't clean",post:"607f49ca845ea1cba8e2ij21"},

{  username: "ScumbagSteve", comment:"Denied your PR cause I found a hack",post:"607f49ca845ea1cba8e2ij22"}
  ]);
{ acknowledged: true,
  insertedIds: 
   { '0': ObjectId("617bdbeda3e85ef8a6b2cddc"),
     '1': ObjectId("617bdbeda3e85ef8a6b2cddd"),
     '2': ObjectId("617bdbeda3e85ef8a6b2cdde"),
     '3': ObjectId("617bdbeda3e85ef8a6b2cddf"),
     '4': ObjectId("617bdbeda3e85ef8a6b2cde0") } }
 1 db.users.find()
{ _id: ObjectId("617bdb89a3e85ef8a6b2cdd4"),
  username: 'GoodGuyGreg',
  first_name: 'Good Guy',
  last_name: 'Greg' }
{ _id: ObjectId("617bdb89a3e85ef8a6b2cdd5"),
  username: 'ScumbagSteve',
  full_name: { first_name: 'Scumbag', last_name: 'Steve' } }
 2 db.posts.find()
{ _id: ObjectId("617bdbb7a3e85ef8a6b2cdd6"),
  username: 'GoodGuyGreg',
  title: 'Passes out at party',
  body: 'Wakes up early and cleans house' }
{ _id: ObjectId("617bdbb7a3e85ef8a6b2cdd7"),
  username: 'GoodGuyGreg',
  title: 'Steals your identity',
  body: 'Raises your credit score' }
{ _id: ObjectId("617bdbb7a3e85ef8a6b2cdd8"),
  username: 'GoodGuyGreg',
  title: 'Reports a bug in your code',
  body: 'Sends you a pull request' }
{ _id: ObjectId("617bdbb7a3e85ef8a6b2cdd9"),
  username: 'ScumbagSteve',
  title: 'Borrows something',
  body: 'Sells it' }
{ _id: ObjectId("617bdbb7a3e85ef8a6b2cdda"),
  username: 'ScumbagSteve',
  title: 'Borrows everything',
  body: 'The end' }
{ _id: ObjectId("617bdbb7a3e85ef8a6b2cddb"),
  username: 'ScumbagSteve',
  title: 'Forks your repo on github',
  body: 'Sets to private' }
3 db.posts.find({username:"GoodGuyGreg"})
{ _id: ObjectId("617bdbb7a3e85ef8a6b2cdd6"),
  username: 'GoodGuyGreg',
  title: 'Passes out at party',
  body: 'Wakes up early and cleans house' }
{ _id: ObjectId("617bdbb7a3e85ef8a6b2cdd7"),
  username: 'GoodGuyGreg',
  title: 'Steals your identity',
  body: 'Raises your credit score' }
{ _id: ObjectId("617bdbb7a3e85ef8a6b2cdd8"),
  username: 'GoodGuyGreg',
  title: 'Reports a bug in your code',
  body: 'Sends you a pull request' }
4 db.posts.find({username:"ScumbagSteve"})
{ _id: ObjectId("617bdbb7a3e85ef8a6b2cdd9"),
  username: 'ScumbagSteve',
  title: 'Borrows something',
  body: 'Sells it' }
{ _id: ObjectId("617bdbb7a3e85ef8a6b2cdda"),
  username: 'ScumbagSteve',
  title: 'Borrows everything',
  body: 'The end' }
{ _id: ObjectId("617bdbb7a3e85ef8a6b2cddb"),
  username: 'ScumbagSteve',
  title: 'Forks your repo on github',
  body: 'Sets to private' }
5 db.comments.find()
{ _id: ObjectId("617bdbeda3e85ef8a6b2cddc"),
  username: 'GoodGuyGreg',
  comment: 'Hope you got a good deal!',
  post: '607f49ca845ea1cba8e2ij18' }
{ _id: ObjectId("617bdbeda3e85ef8a6b2cddd"),
  username: 'GoodGuyGreg',
  comment: 'What\'s mine is yours!',
  post: '607f49ca845ea1cba8e2ij19' }
{ _id: ObjectId("617bdbeda3e85ef8a6b2cdde"),
  username: 'GoodGuyGreg',
  comment: 'Don\'t violate the licensing agreement!',
  post: '607f49ca845ea1cba8e2ij20' }
{ _id: ObjectId("617bdbeda3e85ef8a6b2cddf"),
  username: 'ScumbagSteve',
  comment: 'It still isn\'t clean',
  post: '607f49ca845ea1cba8e2ij21' }
{ _id: ObjectId("617bdbeda3e85ef8a6b2cde0"),
  username: 'ScumbagSteve',
  comment: 'Denied your PR cause I found a hack',
  post: '607f49ca845ea1cba8e2ij22' }
 6 db.comments.find({username:"GoodGuyGreg"})
{ _id: ObjectId("617bdbeda3e85ef8a6b2cddc"),
  username: 'GoodGuyGreg',
  comment: 'Hope you got a good deal!',
  post: '607f49ca845ea1cba8e2ij18' }
{ _id: ObjectId("617bdbeda3e85ef8a6b2cddd"),
  username: 'GoodGuyGreg',
  comment: 'What\'s mine is yours!',
  post: '607f49ca845ea1cba8e2ij19' }
{ _id: ObjectId("617bdbeda3e85ef8a6b2cdde"),
  username: 'GoodGuyGreg',
  comment: 'Don\'t violate the licensing agreement!',
  post: '607f49ca845ea1cba8e2ij20' }
 7 db.comments.find({username:"ScumbagSteve"})
{ _id: ObjectId("617bdbeda3e85ef8a6b2cddf"),
  username: 'ScumbagSteve',
  comment: 'It still isn\'t clean',
  post: '607f49ca845ea1cba8e2ij21' }
{ _id: ObjectId("617bdbeda3e85ef8a6b2cde0"),
  username: 'ScumbagSteve',
  comment: 'Denied your PR cause I found a hack',
  post: '607f49ca845ea1cba8e2ij22' }